#include <stdio.h>
#include <stdbool.h>
#define MAX_VERTICES 100

bool isSafe(int graph[MAX_VERTICES][MAX_VERTICES], int color[], int v, int 
c, int V) {
 for (int i = 0; i < V; i++) {
 if (graph[v][i] && color[i] == c) {
 return false;
 }
 }
 return true;
}
bool graphColoringUtil(int graph[MAX_VERTICES][MAX_VERTICES], int color[], 
int v, int m, int V) {

 if (v == V) {
 return true;
 }
 for (int c = 1; c <= m; c++) {
 if (isSafe(graph, color, v, c, V)) {
 color[v] = c; 
 if (graphColoringUtil(graph, color, v + 1, m, V)) {
 return true;
 }
 color[v] = 0;
 }
 }
 return false;
}
bool graphColoring(int graph[MAX_VERTICES][MAX_VERTICES], int V, int m) {
 int color[V];
 for (int i = 0; i < V; i++) {
 color[i] = 0; 
 }

 return graphColoringUtil(graph, color, 0, m, V);
}

void printSolution(int color[], int V) {
 printf("Solution:\n");
 for (int i = 0; i < V; i++) {
 printf("Vertex %d ---> Color %d\n", i, color[i]);
 }
}
int main() {
 int V, E, m;
 int graph[MAX_VERTICES][MAX_VERTICES] = {0};

 printf("Enter the number of vertices: ");
 scanf("%d", &V);

 printf("Enter the number of edges: ");
 scanf("%d", &E);

 printf("Enter the edges (format: u v):\n");
 for (int i = 0; i < E; i++) {
 int u, v;
 scanf("%d %d", &u, &v);
 graph[u][v] = 1;
 graph[v][u] = 1;
 }
 printf("Enter the number of colors: ");
 scanf("%d", &m);
 
 if (graphColoring(graph, V, m)) {
 printf("Solution exists with %d colors:\n", m);
 printSolution(color, V);
 } else {
 printf("Solution does not exist with %d colors.\n", m);
 }
 return 0;
}
